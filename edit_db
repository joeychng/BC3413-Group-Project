import sqlite3
import csv
import os
import pandas as pd
import yfinance as yf
import prettytable
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from collections import defaultdict
from datetime import datetime, timedelta

#from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas


DB_NAME = "portfolio.db"
# ------------------------------
# Database Setup
# ------------------------------
def init_db(db_name="portfolio.db"):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
                                id INTEGER PRIMARY KEY,
                                username TEXT UNIQUE,
                                password TEXT,
                                security_question TEXT,
                                security_answer TEXT,
                                risk_tolerance TEXT
                                )
                                ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS companies (
            ticker TEXT PRIMARY KEY,
            name TEXT,
            exchange TEXT,
            sector TEXT,
            industry TEXT,
            market_cap REAL,
            sales REAL,
            profits REAL,
            assets REAL,
            market_value REAL
        )
    ''')
    cursor.execute('''
        CREATE VIRTUAL TABLE IF NOT EXISTS companies_fts USING fts5 (
            name,
            tokenize = 'trigram'
        )
    ''')
    cursor.execute('''
        CREATE TRIGGER IF NOT EXISTS companies_fts_trigger
            AFTER INSERT ON companies
        BEGIN
            INSERT INTO companies_fts (rowid, name) VALUES (new.rowid, new.name);
        END
    ''')

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS portfolios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            ticker TEXT,
            shares INTEGER,
            share_check INTEGER,
            live_price REAL,
            purchase_price REAL,
            purchase_date TEXT,
            sale_price REAL DEFAULT NULL,
            sale_date TEXT DEFAULT NULL,
            realized_profit_loss REAL DEFAULT NULL,
            unrealized_profit_loss REAL DEFAULT NULL,
            FOREIGN KEY (username) REFERENCES users(username)
        )
    ''')
    conn.commit()
    return conn
# ------------------------------
# Data Loading Functions
# ------------------------------
def load_csv_data():
    usa_large_companies = pd.read_csv("data/USA large companies.csv", delimiter="\t")
    stock_info = pd.read_csv("data/stock_info_tickers_exchange.csv")
    nasdaq_data = pd.read_csv("data/nasdaq_tickers_sector.csv")
    sp_data = pd.read_csv("data/SnP_tickers_sector.csv")
    return usa_large_companies, stock_info, nasdaq_data, sp_data

# ------------------------------
# Data Insertion into SQLite
# ------------------------------
def insert_data_to_db(conn, stock_info):
    cursor = conn.cursor()
    for _, row in stock_info.iterrows():
        cursor.execute('''
            INSERT OR REPLACE INTO companies (ticker, name, exchange)
            VALUES (?, ?, ?)
        ''', (row['Ticker'], row['Name'], row['Exchange']))
    conn.commit()

# ------------------------------
# Yahoo Finance Integration
# ------------------------------
def fetch_stock_data(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    hist = stock.history(period="1y")
    returns = hist['Close'].pct_change().dropna()
    return {
        'Ticker': ticker,
        'Company': info.get('shortName', 'N/A'),
        'Sector': info.get('sector', 'N/A'),
        'Industry': info.get('industry', 'N/A'),
        'EBITDA': info.get('ebitda', 'N/A'),
        'Book Value': info.get('bookValue', 'N/A'),
        'Market Cap': info.get('marketCap', 'N/A'),
        'Previous Close': info.get('previousClose', 'N/A'),
        'Trailing PE': info.get('trailingPE', 'N/A'),
        'Forward PE': info.get('forwardPE', 'N/A'),
        'Beta': info.get('beta', 'N/A'),
        'Returns': returns
    }

def fetch_historical_price(ticker, date_str):
    """
    Fetch the historical closing price for a stock on a given date.
    If no data is available for that date (weekend/holiday), fetch the last available trading day.
    """
    try:
        # Convert date string to datetime object
        date = datetime.strptime(date_str, "%Y-%m-%d")

        # Attempt to fetch data for the exact date
        stock = yf.Ticker(ticker)
        hist = stock.history(period="1d", start=date_str, end=(date + timedelta(days=1)).strftime('%Y-%m-%d'))

        # If no data available, check previous trading days
        while hist.empty:
            date -= timedelta(days=1)  # Move to previous day
            if date.weekday() in [5, 6]:  # Skip weekends (Saturday=5, Sunday=6)
                date -= timedelta(days=2)

            # Try fetching again
            hist = stock.history(period="1d", start=date.strftime('%Y-%m-%d'), end=(date + timedelta(days=1)).strftime('%Y-%m-%d'))

            # Stop if checking too far back (e.g., 30 days ago)
            if (datetime.today() - date).days > 30:
                return None

        # Return the closing price of the last available trading day
        return hist['Close'].iloc[0]

    except Exception as e:
        return None

# ------------------------------
# User Guide
# ------------------------------
def search_company_by_name(conn, name_query):
    try:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT rowid FROM companies_fts WHERE companies_fts MATCH ? ORDER BY rank LIMIT 5",
            (name_query,)
        )
        fts_res = cursor.fetchall()
        if not fts_res:
            return []

        param_ls = ','.join(['?'] * len(fts_res))
        cursor.execute(
            f"SELECT ticker, name FROM companies WHERE rowid IN ({param_ls})",
            [x[0] for x in fts_res]
        )
        return cursor.fetchall()
    except Exception as e:
        print("Search error:", e)
        return []

##---------------------------------
#Add Stock
##---------------------------------
def add_stock_to_db(conn, username, ticker, shares, purchase_price, purchase_date, live_price, today_str=None):
    today_str = datetime.today().strftime('%d-%m-%Y')
    if purchase_date == today_str:
        stock_data = fetch_stock_data(ticker)
        live_price = stock_data.get('Bid', stock_data.get('Previous Close', 0))
    else:
        live_price = fetch_historical_price(ticker, purchase_date)

    final_price = float(purchase_price) if purchase_price else live_price
    unrealized_pnl = (live_price - final_price) * int(shares) if live_price else None

    share_check = shares

    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO portfolios (
            username, ticker, shares, share_check, live_price, purchase_price, purchase_date, unrealized_profit_loss
        )
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        username, ticker, shares, share_check, live_price, purchase_price, purchase_date, unrealized_pnl
    ))
    conn.commit()

